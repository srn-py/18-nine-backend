# Generated by Django 4.2 on 2025-01-12 14:17

import autoslug.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('catalog', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='The name of the product.', max_length=255, verbose_name='Product Name')),
                ('description', models.TextField(help_text='A detailed description of the product.', verbose_name='Description')),
                ('base_price', models.DecimalField(blank=True, decimal_places=2, help_text='Base price of the product if there are no variants or as a fallback.', max_digits=10, null=True, verbose_name='Base Price')),
                ('overall_rating', models.DecimalField(decimal_places=2, default=0, help_text='The overall rating of the product based on user reviews.', max_digits=3, verbose_name='Overall Rating')),
                ('exclusive', models.BooleanField(default=False, help_text='Indicates if the product is exclusive or not.', verbose_name='Exclusive')),
                ('return_policy', models.CharField(help_text='Return policy for the product (e.g., number of days, exchange only).', max_length=255, verbose_name='Return Policy')),
                ('exchange_policy', models.CharField(help_text='Exchange policy for the product (e.g., exchange only).', max_length=255, verbose_name='Exchange Policy')),
                ('pay_on_delivery', models.BooleanField(default=False, help_text='Whether this product allows cash on delivery.', verbose_name='Pay on Delivery')),
                ('instructions', models.TextField(blank=True, help_text='Instructions for use or any special guidelines.', null=True, verbose_name='Instructions')),
                ('wash_care', models.TextField(blank=True, help_text='Instructions on wash care for the product.', null=True, verbose_name='Wash Care Instructions')),
                ('quality_checked', models.BooleanField(default=False, help_text='Indicates whether the product has been quality checked.', verbose_name='Quality Checked')),
                ('slug', autoslug.fields.AutoSlugField(blank=True, editable=False, help_text='URL-friendly version of the product name.', null=True, populate_from='name', unique=True, verbose_name='Slug')),
                ('categories', models.ManyToManyField(help_text='Categories that this product belongs to.', to='catalog.category', verbose_name='Categories')),
                ('fabric', models.ForeignKey(help_text='The fabric used for the product.', on_delete=django.db.models.deletion.PROTECT, related_name='products', to='catalog.fabric', verbose_name='Fabric')),
                ('length', models.ForeignKey(help_text='The length of the product.', on_delete=django.db.models.deletion.PROTECT, related_name='products', to='catalog.length', verbose_name='Length')),
                ('neck', models.ForeignKey(help_text='The neck type of the product.', on_delete=django.db.models.deletion.PROTECT, related_name='products', to='catalog.neck', verbose_name='Neck')),
                ('pattern', models.ForeignKey(help_text='The pattern common to this product.', on_delete=django.db.models.deletion.PROTECT, related_name='products', to='catalog.pattern', verbose_name='Pattern')),
                ('shape', models.ForeignKey(help_text='The shape of the product.', on_delete=django.db.models.deletion.PROTECT, related_name='products', to='catalog.shape', verbose_name='Shape')),
                ('sleeve_length', models.ForeignKey(help_text='The sleeve length of the product.', on_delete=django.db.models.deletion.PROTECT, related_name='products', to='catalog.sleevelength', verbose_name='Sleeve Length')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('variant_name', models.CharField(help_text='Variant Name for the product', max_length=100, unique=True, verbose_name='Variant Name')),
                ('offer_percentage', models.IntegerField(default=0.0, help_text='Discount percentage applied to this variant (0-100).', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)], verbose_name='Offer Percentage')),
                ('stock_count', models.IntegerField(help_text='The number of units available for this variant.', verbose_name='Stock Count')),
                ('sku', models.CharField(help_text='Unique identifier for this product variant.', max_length=100, unique=True, verbose_name='SKU')),
                ('slug', autoslug.fields.AutoSlugField(blank=True, editable=False, help_text='URL-friendly version of the product variant.', null=True, populate_from='product__name', unique=True, verbose_name='Slug')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if this variant is active and available for sale.', verbose_name='Is Active')),
                ('colors', models.ManyToManyField(blank=True, help_text='The colors available for this product variant.', related_name='variants', to='catalog.color', verbose_name='Colors')),
                ('product', models.ForeignKey(help_text='The product this variant belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='store.product', verbose_name='Product')),
                ('size', models.ForeignKey(blank=True, help_text='The size of this variant.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='variants', to='catalog.size', verbose_name='Size')),
            ],
            options={
                'verbose_name': 'Product Variant',
                'verbose_name_plural': 'Product Variants',
                'ordering': ['product__name', 'size'],
            },
        ),
        migrations.CreateModel(
            name='UserReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveSmallIntegerField(help_text='The rating given by the user (1-5).', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Rating')),
                ('review_text', models.TextField(blank=True, help_text='The text content of the review.', null=True, verbose_name='Review Text')),
                ('likes', models.PositiveIntegerField(default=0, help_text='The number of users who liked this review.', verbose_name='Likes')),
                ('dislikes', models.PositiveIntegerField(default=0, help_text='The number of users who disliked this review.', verbose_name='Dislikes')),
                ('is_verified', models.BooleanField(default=False, help_text='Indicates whether the review is from a verified purchase.', verbose_name='Is Verified Purchase')),
                ('product_variant', models.ForeignKey(help_text='The specific variant of the product this review is associated with.', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='store.productvariant', verbose_name='Product Variant')),
                ('user', models.ForeignKey(help_text='The user who submitted the review.', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Review',
                'verbose_name_plural': 'User Reviews',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='SizeAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('centimeter', models.FloatField(help_text='The value of the attribute for this size in cm.', verbose_name='Centimeter')),
                ('inch', models.CharField(help_text='The value of the attribute for this size in inch.', max_length=20, verbose_name='Unit')),
                ('attribute', models.ForeignKey(help_text='The specific attribute for this size (e.g., Waist, Hip).', on_delete=django.db.models.deletion.CASCADE, related_name='size_values', to='catalog.sizeattribute', verbose_name='Size Attribute')),
                ('product_variant', models.ForeignKey(help_text='The product variant this size attribute belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='size_attributes', to='store.productvariant', verbose_name='Product Variant')),
                ('size', models.ForeignKey(help_text='The size this attribute is associated with.', on_delete=django.db.models.deletion.CASCADE, related_name='attributes', to='catalog.size', verbose_name='Size')),
            ],
            options={
                'verbose_name': 'Size Attribute',
                'verbose_name_plural': 'Size Attributes',
                'ordering': ['product_variant', 'size', 'attribute'],
            },
        ),
        migrations.CreateModel(
            name='ReviewImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(help_text='The image uploaded for this review.', upload_to='review_images/', verbose_name='Image')),
                ('review', models.ForeignKey(help_text='The review to which this image belongs.', on_delete=django.db.models.deletion.CASCADE, related_name='images', to='store.userreview', verbose_name='Review')),
            ],
            options={
                'verbose_name': 'Review Image',
                'verbose_name_plural': 'Review Images',
                'ordering': ['-created'],
            },
        ),
        migrations.AddConstraint(
            model_name='productvariant',
            constraint=models.UniqueConstraint(fields=('product', 'variant_name', 'size'), name='unique_product_variant_name_size'),
        ),
    ]
